# -*- coding: utf-8 -*-
"""
/***************************************************************************
 seg2shp
                                 A QGIS plugin
 This plugin performs semantic segmentation and convert it to shape file.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-06-11
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Hansae Kim
        email                : kim4012@purdue.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from errno import ERANGE
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, pyqtSignal, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis._gui import QgsMapMouseEvent
from qgis.core import QgsProject, QgsVectorLayer, QgsFillSymbol, QgsSingleSymbolRenderer, QgsPointXY, QgsRectangle
from PyQt5.QtWidgets import QAction, QFileDialog, QMessageBox
from qgis.gui import QgsMapToolEmitPoint, QgsMapToolExtent

# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the dialog
from .seg2shp_dialog import seg2shpDialog
import os.path

# Import python modules
import numpy as np
from .rs_tools import LightImage, polygonize, save_polygons, load_polygons, world2Pixel
from segment_anything import SamAutomaticMaskGenerator, sam_model_registry, SamPredictor
from shapely.geometry import Polygon as sPolygon
from torch import cuda
from torch.backends import mps
import cv2
import time


class BoxTool(QgsMapToolExtent):
    def __init__(self, parent, canvas):
        super().__init__(canvas)
        self.canvas = canvas
        self.parent = parent
    
    def canvasReleaseEvent(self, e: QgsMapMouseEvent) -> None:
        super().canvasReleaseEvent(e)
        self.parent.show()
        self.deactivate()

class PointTool(QgsMapToolEmitPoint):
    def __init__(self, parent, canvas):
        super().__init__(canvas)
        self.canvas = canvas
        self.parent = parent
    
    def canvasReleaseEvent(self, event):
        super().canvasReleaseEvent(event)
        self.parent.show()
        self.deactivate()

class seg2shp:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'seg2shp_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&seg2shp')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('seg2shp', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/seg2shp/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'seg2shp'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&seg2shp'),
                action)
            self.iface.removeToolBarIcon(action)


    def select_output_file(self):
        try:
            filename, _filter = QFileDialog.getSaveFileName(
                self.dlg, "Select output file ","", '*.shp')
            self.dlg.lineEdit_output_layer.setText(filename)
        except:
            pass
        
        self.dlg.hide()
        self.dlg.show()
        
        
    def model_check(self):
        
        if self.dlg.groupBox_sam.isChecked():
            model_selected = 'sam'
        elif self.dlg.groupBox_fast_sam.isChecked():
            model_selected = 'fastsam'
        
        if (self.model is None) or (model_selected != self.model):
        
            if self.dlg.groupBox_sam.isChecked():
                print("Building SAM Mask Generator..")
                # SAM model settings
                sam_checkpoint = f"{self.plugin_dir}/checkpoint/sam_vit_h_4b8939.pth"
                model_type = "vit_h"
                self.model = 'sam'
                self.sam = sam_model_registry[model_type](checkpoint=sam_checkpoint)
                self.sam.to(device=self.device)
            
            elif self.dlg.groupBox_fast_sam.isChecked():
                print("Building Fast SAM Mask generator")
                self.model = 'fastsam'
                self.sam = FastSAM(f'{self.plugin_dir}/checkpoint/FastSAM-x.pt')
            
    def do_something(self):
        
        layers = QgsProject.instance().layerTreeRoot().children()
        layer_list = [layer.name() for layer in layers]
        
        # Select the input layer
        selectedLayer_name = self.dlg.mMapLayerComboBox_input_layer.currentText()
        index = layer_list.index(selectedLayer_name)
        selectedLayer = layers[index].layer()
        
        # Get file name for selected layer
        fn = selectedLayer.dataProvider().dataSourceUri()
        
        resize=1024
        
        if self.img_arr is None:
            if self.img_fn != selectedLayer_name:
                print("Reading raster layer..")
                self.lightImage = LightImage(fn)
                img_arr = self.lightImage.get_img_rgb_array()
                # img_arr_float32 = np.array(img_arr, dtype=np.float32)
                self.img_arr = cv2.resize(img_arr, (resize,resize), interpolation=cv2.INTER_NEAREST)
                self.img_fn = selectedLayer_name
        
        scale_row = self.lightImage.nrow/resize
        scale_col = self.lightImage.ncol/resize
        
        img_arr_resize_rgb = self.img_arr[:,:,::-1]
        temp_img_fn = f'{self.plugin_dir}/temp.jpg'
        
        cv2.imwrite(temp_img_fn, img_arr_resize_rgb)
        # del img_arr
    
        print("Image shape:")
        print(np.shape(self.img_arr))
        
        # Get point prompts if exists
        point_prompt = False
        box_prompt = False
            
        prompt_str = self.dlg.lineEdit_coords.text().split(',')
        # check if we have point input
        if len(prompt_str)==2:
            print('Point prompt detected')
            point_prompt = True
            print(prompt_str)
            prompt_arr = np.array(prompt_str, dtype=np.float64)
            x,y = world2Pixel(self.lightImage.geotransform, prompt_arr[0], prompt_arr[1])
            input_point = np.array( [np.array([x,y]) / np.array([scale_col, scale_row])] , dtype=np.int32)
            print('Input point pixel: ',input_point)
        elif len(prompt_str)==4:
            # check if we have box input
            print('Box prompt detected')
            box_prompt = True
            prompt_arr = np.array(prompt_str, dtype=np.float64)
            print('Input box coords: ',prompt_str)
            x1,y1 = world2Pixel(self.lightImage.geotransform, prompt_arr[0], prompt_arr[1])
            x2,y2 = world2Pixel(self.lightImage.geotransform, prompt_arr[2], prompt_arr[3])
            input_box = np.array( np.array([x1,y1,x2,y2]) / np.array([scale_col, scale_row, scale_col, scale_row]) , dtype=np.int32)
            print('Input box pixel: ',input_box)
        else:
            print("No prompts detected")
    
    
        seg_start_time = time.time()
        
        if self.dlg.groupBox_sam.isChecked():
        # SAM mask generator
            self.model_check()
            print('Generating Masks..')
            # Build SAM mask generator
            if point_prompt:
                predictor = SamPredictor(self.sam)
                predictor.set_image(self.img_arr)
                masks = []
                # for x,y in input_point:
                mask, _, _ = predictor.predict(
                    point_coords = input_point,
                    point_labels = np.array([1]),
                    multimask_output=False,
                )
                masks.append({'segmentation':mask[0,:,:]})
                
            elif box_prompt:
                predictor = SamPredictor(self.sam)
                predictor.set_image(self.img_arr)
                masks = []
                mask, _, _ = predictor.predict(
                    point_coords = None,
                    point_labels = None,
                    box=input_box[None,:],
                    multimask_output=False,
                )
                masks.append({'segmentation':mask[0,:,:]})
                
            else:
                mask_generator = SamAutomaticMaskGenerator(
                model=self.sam,
                points_per_side=32,
                pred_iou_thresh=self.dlg.doubleSpinBox_iou_thr.value(),
                stability_score_thresh=self.dlg.doubleSpinBox_pred_score_thr.value(),
                crop_n_layers=1,
                crop_n_points_downscale_factor=2,
                min_mask_region_area=100,  # Requires open-cv to run post-processing
                )
                masks = mask_generator.generate(self.img_arr)

                mask_arr = np.zeros((np.shape(self.img_arr)[0],np.shape(self.img_arr)[1]))
                for mask in masks:
                    mask_arr += mask['segmentation']

        elif self.dlg.groupBox_fast_sam.isChecked():
            # FASTSam Mask generator
            self.model_check()
            print('Generating Masks..')
            IMAGE_PATH = temp_img_fn
            everything_results = self.sam(IMAGE_PATH, device=self.device, retina_masks=True, imgsz=1024, 
                                    conf=self.dlg.doubleSpinBox_conf_thr.value(), iou=self.dlg.doubleSpinBox_iou_thr_fast.value(),)
            prompt_process = FastSAMPrompt(IMAGE_PATH, everything_results, device=self.device)

            if box_prompt:
                # bbox default shape [0,0,0,0] -> [x1,y1,x2,y2]
                masks_torch = prompt_process.box_prompt(bbox=list(input_box))
                masks_arr = masks_torch
            elif point_prompt:
                # point prompt
                masks_torch = prompt_process.point_prompt(points=input_point, pointlabel=[1])
                masks_arr = masks_torch
            else:
                # everything prompt
                masks_torch = prompt_process.everything_prompt()
                masks_arr = masks_torch.cpu().numpy()
            
            masks=[]
            for i in range(np.shape(masks_arr)[0]):
                masks.append({'segmentation':masks_arr[i,:,:]})

        print('Segmentation took: ', f"{(time.time()-seg_start_time):.2f} seconds")

        # Save polygons
        print('Polygonizing..')
        print('Minimum object size: ', self.dlg.spinBox_minimum_object_size.value())

        polygon_list=[]
        min_obj = self.dlg.spinBox_minimum_object_size.value()
        max_obj = self.dlg.spinBox_maximum_object_size.value()
        # kernel_size = int(np.sqrt(min_obj)/10)
        # kernel = np.ones((kernel_size,kernel_size), np.uint8)
        for mask in masks:
            # mask = cv2.morphologyEx(np.array(mask['segmentation'], dtype=np.uint8), cv2.MORPH_OPEN, kernel)
            mask_ = mask['segmentation']
            polygons = polygonize(mask_, min_obj, simplify_tolerance=self.dlg.doubleSpinBox_simplify_tolerance.value())
            for polygon_ in polygons:
                xy = np.array(polygon_.exterior.xy).transpose() * np.array([scale_col, scale_row])
                x = xy[:,0]
                y = -xy[:,1]
                transformed_coords = (np.array([x,y])*self.lightImage.geotransform[1] + 
                                        np.array([[self.lightImage.geotransform[0]],[self.lightImage.geotransform[3]]])).transpose()
                polygon_new = sPolygon(transformed_coords)
                if polygon_new.area > min_obj and polygon_new.area < max_obj:
                    polygon_list.append(polygon_new)
        
        if self.dlg.checkBox_update_layer.isChecked():
            polygons = load_polygons(self.dlg.lineEdit_output_layer.text())
            polygon_list += polygons
            print('Updating Polygons')

        print(f'Saving polygons to {self.dlg.lineEdit_output_layer.text()}..')
        save_polygons(self.dlg.lineEdit_output_layer.text(), polygon_list, self.lightImage.projection.ExportToProj4())
        
        os.remove(temp_img_fn)
        
        self.dlg.hide()
        self._reload_layer()
        
    
    def _reload_layer(self):
        parcel_fn = self.dlg.lineEdit_output_layer.text()
        parcel_layer = QgsVectorLayer(parcel_fn, "parcel_layer", "ogr")
        pb = QgsProject.instance().mapLayersByName('parcel_layer')
        if pb:
            QgsProject.instance().removeMapLayers([pb[0].id()])
            QgsProject.instance().addMapLayer(parcel_layer)
        else:
            QgsProject.instance().addMapLayer(parcel_layer)
        
        r=np.random.randint(0,255)
        g=np.random.randint(0,255)
        b=np.random.randint(0,255)
        color = f'{r},{g},{b}'
        symbol = QgsFillSymbol.createSimple({'width_border':'0.5', 'style':'b_diagonal', 'line_color':color, 'color':color})
        renderer = QgsSingleSymbolRenderer(symbol)
        parcel_layer.setRenderer(renderer)
        parcel_layer.triggerRepaint()
    
    def _writeLineWidget(self, ds):
        
        if isinstance(ds,QgsPointXY):
            x,y = ds
            self.dlg.lineEdit_coords.setText(f'{str(x)},{str(y)}')

        elif isinstance(ds,QgsRectangle):
            xmin = ds.xMinimum()
            xmax = ds.xMaximum()
            ymin = ds.yMinimum()
            ymax = ds.yMaximum()
            self.dlg.lineEdit_coords.setText(f'{str(xmin)},{str(ymax)},{str(xmax)},{str(ymin)}')
        
    def draw_point(self):
        # define a point tool
        self.dlg.hide()
        self.point_tool = PointTool(self.dlg, self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(self.point_tool)
        self.point_tool.canvasClicked.connect(self._writeLineWidget)
        self.point_tool.deactivate()

    def draw_box(self):
        #define box tool
        self.dlg.hide()
        self.box_tool = BoxTool(self.dlg, self.iface.mapCanvas())
        self.iface.mapCanvas().setMapTool(self.box_tool)
        self.box_tool.extentChanged.connect(self._writeLineWidget)
        
    def automatic(self):
        self.dlg.lineEdit_coords.setText('')
        
    def set_fast_sam_groupBox(self):
        try:
            from .FastSAM.fastsam import FastSAM, FastSAMPrompt
            self.dlg.groupBox_sam.setChecked(False)
            self.dlg.groupBox_fast_sam.setChecked(True)
        except:
            self.dlg.groupBox_fast_sam.setChecked(False)
            QMessageBox.warning(None, "Warning", "FastSAM is not available!")
            

        
    def set_sam_groupBox(self):
        self.dlg.groupBox_sam.setChecked(True)
        self.dlg.groupBox_fast_sam.setChecked(False)
    
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = seg2shpDialog()

            # prompt processing
            self.dlg.pushButton_automatic.clicked.connect(self.automatic)
            self.dlg.pushButton_draw_point.clicked.connect(self.draw_point)
            self.dlg.pushButton_draw_box.clicked.connect(self.draw_box)
            
            # select output file
            self.dlg.toolButton_output_layer.clicked.connect(self.select_output_file)
            
            # run the code
            self.dlg.pushButton_run.clicked.connect(self.do_something)            
            
            # interface settings
            self.dlg.groupBox_fast_sam.clicked.connect(self.set_fast_sam_groupBox)
            self.dlg.groupBox_sam.clicked.connect(self.set_sam_groupBox)
            
            self.img_arr = None
            self.img_fn = None
            self.model = None
            
            if cuda.is_available():
                self.device = 'cuda'
            # elif mps.is_available():
            #     self.device = 'mps'
            else:
                self.device = 'cpu'

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
